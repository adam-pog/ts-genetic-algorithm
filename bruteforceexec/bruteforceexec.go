package main

import (
    . "../config"
    "fmt"
)

func main() {
    cityMap := mapp()
    A := []int{}
    c := []int{}
    for i := 0; i < NumCities; i++ {
        A = append(A, i)
        c = append(c, 0)
    }

    solution := calculateTourFitness(A, cityMap)
    count := 0
    for i := 0; i < NumCities; {
        if c[i] < i {
            if i % 2 == 0 {
                temp := A[0]
                A[0] = A[i]
                A[i] = temp
            } else {
                temp := A[c[i]]
                A[c[i]] = A[i]
                A[i] = temp
            }
            count++

            // if(count % 1000000 == 0) {
            //     fmt.Println("\nIteration:", count)
            // }

            newSol := calculateTourFitness(A, cityMap)
            if newSol < solution {
                solution = newSol
            }
            c[i]++
            i = 0
        } else {
            c[i] = 0
            i ++
        }

    }
    fmt.Println("\nCount: ", count)
    fmt.Println("\nsolution: ", solution, "\n")
}


func calculateTourFitness(tour []int, cityMap []map[int]float64) float64{
    fitness := 0.0

    for j := 0; j < NumCities; j++ {
        pointA := tour[j]
        pointB := tour[(j+1) % NumCities]

        fitness += cityMap[pointA][pointB]
    }

    return fitness
}

func mapp() []map[int]float64 {
    return []map[int]float64{
        map[int]float64{5:3680.7567156768187, 7:2376.993268816721, 8:4140.077293964449, 2:2935.248200748959, 4:1571.9634219663, 6:3226.4849294549635, 9:2098.0910371096866, 1:707.8827586542845, 3:3618.235619746177},
        map[int]float64{0:707.8827586542845, 3:2971.210022869471, 5:2973.712158229172, 7:2145.315128366926, 9:1451.0920025966652, 2:2315.721917674918, 4:869.3612597763947, 6:2522.3015283665036, 8:3531.780570760307},
        map[int]float64{0:2935.248200748959, 1:2315.721917674918, 4:1772.7788920223525, 9:873.2674275386664, 3:717.1366675885427, 5:1751.2292825327013, 6:1648.4541243237557, 7:3711.594401332128, 8:3363.6994514968187},
        map[int]float64{4:2324.6720198772127, 6:1627.1330615533568, 0:3618.235619746177, 2:717.1366675885427, 7:4121.466001315552, 8:3294.579335818156, 9:1522.873927808865, 1:2971.210022869471, 5:1521.9990144543458},
        map[int]float64{8:2761.5236736265724, 9:942.064222863813, 2:1772.7788920223525, 5:2111.819357805018, 6:1654.5216831459175, 7:2023.561711438522, 0:1571.9634219663, 1:869.3612597763947, 3:2324.6720198772127},
        map[int]float64{3:1521.9990144543458, 7:3236.2207897484373, 8:1792.7347823925322, 0:3680.7567156768187, 1:2973.712158229172, 2:1751.2292825327013, 4:2111.819357805018, 6:481.8723897464971, 9:1909.2783977199344},
        map[int]float64{1:2522.3015283665036, 2:1648.4541243237557, 3:1627.1330615533568, 5:481.8723897464971, 7:2792.9353734019696, 8:1718.6986355961303, 9:1588.9521704569966, 0:3226.4849294549635, 4:1654.5216831459175},
        map[int]float64{3:4121.466001315552, 4:2023.561711438522, 5:3236.2207897484373, 8:2561.051541847606, 9:2950.7092367768128, 1:2145.315128366926, 2:3711.594401332128, 6:2792.9353734019696, 0:2376.993268816721},
        map[int]float64{6:1718.6986355961303, 7:2561.051541847606, 9:3142.255559307677, 2:3363.6994514968187, 3:3294.579335818156, 5:1792.7347823925322, 0:4140.077293964449, 1:3531.780570760307, 4:2761.5236736265724},
        map[int]float64{2:873.2674275386664, 4:942.064222863813, 5:1909.2783977199344, 7:2950.7092367768128, 0:2098.0910371096866, 1:1451.0920025966652, 3:1522.873927808865, 6:1588.9521704569966, 8:3142.255559307677}}

}
